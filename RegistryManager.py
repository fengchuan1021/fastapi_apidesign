#dont modify this file,it is autogenerated.for IDE vscode's type hint list all Registry with annotations
# no bad affect on efficiency,will be ignored by python runtime
from Registries.base import CRUDBase
import os
import models
import settings
import importlib
import Registries
from typing import Any
class RegistryManager:
    def __getattr__(self,name:str)->Any:
        if os.path.exists(os.path.join(settings.BASE_DIR,'Registries',f'{name}.py')):
            tmpclass=getattr(importlib.import_module(f"Registries.{name}"),name)
            tmpinstance=tmpclass(getattr(models, name.replace('Registry', '')))
            setattr(self, name,tmpinstance)
            return tmpinstance
        if hasattr(models,name.replace('Registry','')):
            tmpinstance= CRUDBase(getattr(models, name.replace('Registry', ''))) #[getattr(models, name.replace('Registry', ''))]
            setattr(self, name, tmpinstance)
            return tmpinstance
        raise Exception(f'not found {name}')

    #those are for IDE's type hinting purpose.
    LogRegistry : CRUDBase[models.Log]
    ProductRegistry : CRUDBase[models.Product]
    RoleRegistry : CRUDBase[models.Role]
    TestRegistry : CRUDBase[models.Test]
    UserRegistry : Registries.UserRegistry
    OrderRegistry : CRUDBase[models.Order]
    PermissionRegistry : CRUDBase[models.Permission]
    UserroleRegistry : CRUDBase[models.Userrole]
    OrderitemRegistry : CRUDBase[models.Orderitem]



Registry=RegistryManager()