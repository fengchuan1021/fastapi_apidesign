#dont modified this file,it is autogenerated
from component.snowFlakeId import snowFlack
from datetime import datetime
# coding: utf-8
from sqlalchemy import Column, DateTime, Enum, Float, ForeignKey, String, Text, text
from sqlalchemy.dialects.mysql import BIGINT, INTEGER
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.dialects.mysql import DATETIME
def defaults_included_constructor(instance, **kwds):
    for attr, value in kwds.items():
        setattr(instance, attr, value)
    for attr in set(getattr(instance, "__eager_defaults__", ())) - set(kwds):
        column = getattr(type(instance), attr)
        setattr(instance, attr, column.default.arg)

Base = declarative_base(constructor=defaults_included_constructor)

metadata = Base.metadata


class Log(Base):
    __tablename__ = 'log'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    msg = Column(Text)
    create_at = Column(DateTime)
    update_at = Column(DateTime)
    delete_at = Column(DateTime)
    is_deleted = Column(INTEGER(11), server_default=text("'0'"))


class Product(Base):
    __tablename__ = 'product'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    is_deleted = Column(DateTime, nullable=False)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    name = Column(String(64), nullable=False, index=True)
    price = Column(Float, nullable=False)
    presale_starttime = Column(DateTime)
    presale_endtime = Column(DateTime)
    in_presale = Column(INTEGER(11), index=True, server_default=text("'0'"))


class Role(Base):
    __tablename__ = 'role'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    is_deleted = Column(DateTime, nullable=False)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    name = Column(String(16), nullable=False, unique=True)
    mark = Column(String(16))


class Test(Base):
    __tablename__ = 'test'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    is_deleted = Column(DateTime, nullable=False)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    name = Column(String(32))


class User(Base):
    __tablename__ = 'user'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    username = Column(String(32), nullable=False, unique=True)
    email = Column(String(32), index=True)
    phone = Column(String(16), index=True)
    balance = Column(Float, server_default=text("'0'"))
    password = Column(String(512), nullable=False)
    gender = Column(Enum('man', 'woman'))
    is_deleted = Column(INTEGER(255), server_default=text("'0'"))
    user_role = Column(INTEGER(11), nullable=False, server_default=text("'0'"))


class Order(Base):
    __tablename__ = 'order'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    is_deleted = Column(DateTime, nullable=False)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    user_id = Column(ForeignKey('user.id', ondelete='RESTRICT', onupdate='RESTRICT'), nullable=False, index=True)

    user = relationship('User')


class Permission(Base):
    __tablename__ = 'permission'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    is_deleted = Column(DateTime, nullable=False)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    baseurl = Column(String(255), nullable=False)
    action = Column(String(32), nullable=False)
    actionmark = Column(String(32), nullable=False)
    role_id = Column(ForeignKey('role.id', ondelete='RESTRICT', onupdate='RESTRICT'), nullable=False, index=True)

    role = relationship('Role')


class Userrole(Base):
    __tablename__ = 'userrole'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    is_deleted = Column(DateTime, nullable=False)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    role_id = Column(ForeignKey('role.id', ondelete='RESTRICT', onupdate='RESTRICT'), nullable=False, index=True)
    user_id = Column(ForeignKey('user.id', ondelete='RESTRICT', onupdate='RESTRICT'), nullable=False, index=True)

    role = relationship('Role')
    user = relationship('User')


class Orderitem(Base):
    __tablename__ = 'orderitem'

    created_at = Column(DateTime, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    deleted_at = Column(DateTime)
    is_deleted = Column(DateTime, nullable=False)
    id = Column(BIGINT, primary_key=True,default=snowFlack.getId)
    order_id = Column(ForeignKey('order.id', ondelete='RESTRICT', onupdate='RESTRICT'), nullable=False, index=True)
    product_id = Column(ForeignKey('product.id', ondelete='RESTRICT', onupdate='RESTRICT'), nullable=False, index=True)

    order = relationship('Order')
    product = relationship('Product')
