
import io
import os
from sqlalchemy import create_engine, MetaData
from sqlacodegen.codegen import CodeGenerator
import settings
import re
from pathlib import Path
def generate_model()->None:
    engine = create_engine(settings.DBURL.replace('mysql+aiomysql','mysql+pymysql'))
    metadata = MetaData(bind=engine)
    metadata.reflect()
    memoryfile = io.StringIO()
    generator = CodeGenerator(metadata)
    generator.render(memoryfile)

    memoryfile.seek(0)
    newcontent=memoryfile.read().replace('''id = Column(BIGINT(20), primary_key=True)''','''id = Column(BIGINT, primary_key=True,default=snowFlack.getId)''')
    newcontent="#dont modified this file,it is autogenerated\nfrom component.snowFlakeId import snowFlack\nfrom datetime import datetime\n"+newcontent
    modelbase=open(os.path.join(settings.BASE_DIR,'devtools','template','modelbase.py.tpl'),'r',encoding='utf8').read()
    newcontent=newcontent.replace('Base = declarative_base()',modelbase)
    newcontent=re.sub(r'(update_at.*?\)$)','updated_at = Column(DATETIME, nullable=False, default=datetime.now, onupdate=datetime.now)',newcontent)
    newcontent=re.sub(r'(created_at.*?\)$)','created_at = Column(DATETIME, nullable=False, default=datetime.now)',newcontent)
    oldcontent=''
    if os.path.exists(os.path.join(settings.BASE_DIR,'models', 'allmodels.py.fromdb')):

        with open(os.path.join(settings.BASE_DIR,'models', 'allmodels.py.fromdb'), 'r+', encoding='utf8') as f:
            oldcontent=f.read()

    if newcontent!=oldcontent:
        with open(os.path.join(settings.BASE_DIR,'models', 'allmodels.py.fromdb'), 'w', encoding='utf8') as f:
            f.write(newcontent)

    overwriteclass=[]
    for tmpfile in Path(settings.BASE_DIR).joinpath('models').rglob("*.py"):
        if tmpfile.name.endswith('.py') and tmpfile.name not in ['__init__.py','autogeneratedmodel.py']:
            overwriteclass.append(tmpfile.name[0:-3])
    foundflag=0
    def setfoundflag(matched:re.Match)->str:
        foundflag=1
        return matched.groups()[0] + (matched.groups()[2] if len(matched.groups()) >= 3 else '')
    for classname in overwriteclass:
        foundflag = 0
        newcontent=re.sub(rf'(.*?)(class {classname}\(B.*?)(class.*)', setfoundflag, newcontent, 0, re.DOTALL)
        if not foundflag:
            newcontent = re.sub(rf'(class {classname}\(B.*)', '',newcontent, 0, re.DOTALL)

    oldautogenerated=''
    if os.path.exists(os.path.join(settings.BASE_DIR,'models','autogeneratedmodel.py')):
        oldautogenerated=open(os.path.join(settings.BASE_DIR,'models','autogeneratedmodel.py'),'r',encoding='utf8').read()
    if oldautogenerated!=newcontent:
        with open(os.path.join(settings.BASE_DIR,'models','autogeneratedmodel.py'),'w',encoding='utf8') as f:
            f.write(newcontent)
    def getclassname()->str:
        classname=",".join(sorted(set(re.findall(r"class (.*?)\(", newcontent)).difference(set(overwriteclass)).union(set(["Base"]))))

        return classname
    imports1=''.join(sorted([f'from .{classname} import {classname}\n' for classname in overwriteclass]))
    import2=f'from .autogeneratedmodel import ({getclassname()})'
    imports=imports1+import2
    with open(os.path.join(settings.BASE_DIR,'models','__init__.py'),'r',encoding='utf8') as f:
        oldimmports=f.read()

    if imports!=oldimmports:
        with open(os.path.join(settings.BASE_DIR, 'models', '__init__.py'), 'w', encoding='utf8') as f:
            f.write(imports)

if __name__ == '__main__':
    generate_model()
